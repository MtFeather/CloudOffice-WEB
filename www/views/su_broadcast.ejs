<% include header.ejs %>

    <!--
    noVNC example: simple example using default UI
    Copyright (C) 2012 Joel Martin
    Copyright (C) 2013 Samuel Mannehed for Cendio AB
    noVNC is licensed under the MPL 2.0 (see LICENSE.txt)
    This file is licensed under the 2-Clause BSD license (see LICENSE.txt).

    Connect parameters are provided in query string:
        http://example.com/?host=HOST&port=PORT&encrypt=1&true_color=1
    or the fragment:
        http://example.com/#host=HOST&port=PORT&encrypt=1&true_color=1
    -->


    <!-- Always force latest IE rendering engine (even in intranet) & Chrome Frame
                Remove this if you use the .htaccess -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

    <!-- Apple iOS Safari settings -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <!-- App Start Icon  -->
    <link rel="apple-touch-startup-image" href="app/images/screen_320x460.png" />
    <!-- For iOS devices set the icon to use if user bookmarks app on their homescreen -->
    <link rel="apple-touch-icon" href="app/images/screen_57x57.png">
    <!--
    <link rel="apple-touch-icon-precomposed" href="app/images/screen_57x57.png" />
    -->


    <!-- Stylesheets -->
    <link rel="stylesheet" href="noVNC/app/styles/auto.css">
    <link rel="stylesheet" href="/stylesheets/socketchet.css">
     <!--
    <script type='text/javascript'
        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>
    -->
    <script src="core/util.js"></script>
    <script src="app/webutil.js"></script>
    <!--聊天室用-->
    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript">
        window.onload = function() {
            var hichat = new HiChat();
            hichat.init('(<%= user.account %>)<%= user.name %>');
        }
	var socket=io.connect(),//与服务器进行连接
            button=document.getElementById('sendBtn');
        function openNav() {
            document.getElementById("myNav").style.width = "80%";
        }

        function closeNav() {
            document.getElementById("myNav").style.width = "0%";
        }

        function closechat() {
            document.getElementById("wrapper").style.display = "none";
        }

        function openchat() {
            var chat = document.getElementById("wrapper").style.display;
            if (chat) {
                document.getElementById("wrapper").style.display = "";
            } else {
                document.getElementById("wrapper").style.display = "none";
            }
        }
    </script>
    <div id="myNav" class="overlay">
      <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
      <div class="overlay-content">
        <div class="row">
          <div class="col-md-6">
            <h2>管理員廣播:</h2>
          </div>
        </div>
          <div class="col-md-12">
            <button type="button" class="btn btn-default broadcast" value="<%= user.id %>">(<%= user.account %>)<%= user.name %></button>
          </div>
        <div class="row">
          <div class="col-md-12">
            <h2>請選擇要廣播的員工:</h2>
          </div>
        </div>
        <% emp.forEach(function(rows) { %>
          <div class="col-md-2">
              <button type="button" class="btn btn-default broadcast" value="<%= rows.eid %>">(<%= rows.account %>)<%= rows.name %></button>
          </div>
        <% }) %>
      </div>
    </div>
    <span style="font-size:30px;cursor:pointer" onclick="openNav()" class="openNav">&raquo;</span>
    <span class="openChat" style="cursor:pointer" onclick="openchat()"><i class="glyphicon glyphicon-comment"></i></span>
    <div id="noVNC_container" class="panel panel-primary">
            <div id="noVNC_status_bar" class="panel-heading" style="margin-top: 0px;">
                <table border=0 width="100%"><tr>
                    <td><div id="noVNC_status" style="position: relative; height: auto;">
                        Loading
                    </div></td>
                    <td width="1%"><div id="noVNC_buttons">
                        <input type=button value="reconnect" onclick="reconnect()" class="btn btn-default"/>
                        <input type=button value="fullscreen"
                            id="noVNC_fullscreen_button" class="btn btn-default">
                        <input type=button value="Send Ctrl+Alt+Del"
                            id="sendCtrlAltDelButton" class="btn btn-default">
                        <span id="noVNC_xvp_buttons">
                        <input type=button value="Shutdown"
                            id="xvpShutdownButton" class="btn btn-default">
                        <input type=button value="Reboot"
                            id="xvpRebootButton" class="btn btn-default">
                        <input type=button value="Reset"
                            id="xvpResetButton" class="btn btn-default">
                        </span>
                            </div></td>
                </tr></table>
            </div>
            <canvas id="noVNC_canvas" width="640px" height="20px">
                Canvas not supported.
            </canvas>
        </div>
<!--聊天室socket-->
<div class="wrapper" id="wrapper">
	<a  onclick="closechat()" class="glyphicon glyphicon-remove pull-right"style="padding:5px"></a>
          <h1 style="font-size:18px;width:70px;">聊天室</h1>
          <span id="status"></span>
            <div id="historyMsg">
            </div>
            <div class="controls"style="color:#000" >
                <div class="items" style="color:#000">
                    <input id="colorStyle" type="color" placeHolder='#000' title="選取文字顏色" />
                    <input id="emoji" type="button" value="表情" title="選取表情貼圖"class="btn-primary" />
                    <label for="sendImage" class="imageLable">
                        <input id="sendImage" type="file" value="image"/>
                        <input type="button" value="上傳照片" class="btn-primary" />
                    </label>
                    <input id="clearBtn" type="button" value="清空聊天室" title="清空聊天室內容" class="btn-primary"/>
                </div>
                <textarea id="messageInput" placeHolder="請輸入內容"></textarea>
                <input id="sendBtn" type="button" value="送出">
                <div id="emojiWrapper">
                </div>
            </div>
        </div>
        <div id="loginWrapper">
            <p id="info">無法連接至server...</p>
            <div id="nickWrapper">
                <input type="text" placeHolder="請輸入姓名" id="nicknameInput" />
                <input type="button" value="送出" id="loginBtn" />
            </div>
        </div>
</div>
	<style>
	 /* #noVNC_canvas{
	    width: 100%;
	    margin-left:100px;
	    background: none;
	  }*/
	</style>
        <script>
        /*jslint white: false */
        /*global window, $, Util, RFB, */
        "use strict";

        // Load supporting scripts
        WebUtil.load_scripts({
            'core': ["base64.js", "websock.js", "des.js", "input/keysymdef.js",
                     "input/xtscancodes.js", "input/util.js", "input/devices.js",
                     "display.js", "inflator.js", "rfb.js", "input/keysym.js"],
            'app': [WebUtil.getLanguageFileLocation(), "webutil.js"]});

        var rfb;
        var resizeTimeout;
        var desktopName;


        function UIresize() {
            if (WebUtil.getConfigVar('resize', false)) {
                var innerW = window.innerWidth;
                var innerH = window.innerHeight;
                var controlbarH = document.getElementById('noVNC_status_bar').offsetHeight;
                if (innerW !== undefined && innerH !== undefined)
                    rfb.requestDesktopSize(innerW, innerH - controlbarH);
            }
        }
        function FBUComplete(rfb, fbu) {
            UIresize();
            rfb.set_onFBUComplete(function() { });
        }
        function updateDesktopName(rfb, name) {
            desktopName = name;
        }
        function passwordRequired(rfb, msg) {
            if (typeof msg === 'undefined') {
                msg = 'Password Required: ';
            }
            var html;
            html = '<form onsubmit="return setPassword();"';
            html += '  style="margin-bottom: 0px">';
            html += msg;
            html += '<input type=password size=10 id="password_input" class="noVNC_status">';
            html += '<\/form>';
            status(html, "warn");
        }
        function setPassword() {
            rfb.sendPassword(document.getElementById('password_input').value);
            return false;
        }
        function toggleFullscreen() {
	    if (document.fullscreenElement || // alternative standard method
                document.mozFullScreenElement || // currently working methods
                document.webkitFullscreenElement ||
                document.msFullscreenElement) {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                document.getElementById("navv").style.display = "block";
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                document.getElementById("navv").style.display = "block";
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                document.getElementById("navv").style.display = "block";
                } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                document.getElementById("navv").style.display = "block";
                }
            } else {
                if (document.getElementById("noVNC_canvas").requestFullscreen) {
                    document.getElementById("noVNC_canvas").requestFullscreen();
                } else if (document.getElementById("noVNC_canvas").mozRequestFullScreen) {
                    document.getElementById("noVNC_canvas").mozRequestFullScreen();
                } else if (document.getElementById("noVNC_canvas").webkitRequestFullscreen) {
                    document.getElementById("noVNC_canvas").webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                } else if (document.getElementById("noVNC_canvas").body.msRequestFullscreen) {
                    document.getElementById("noVNC_canvas").body.msRequestFullscreen();
                }
            }
	}
        function sendCtrlAltDel() {
            rfb.sendCtrlAltDel();
            return false;
        }
        function xvpShutdown() {
            rfb.xvpShutdown();
            return false;
        }
        function xvpReboot() {
            rfb.xvpReboot();
            return false;
        }
        function xvpReset() {
            rfb.xvpReset();
            return false;
        }
        function status(text, level) {
            switch (level) {
                case 'normal':
                case 'warn':
                case 'error':
                    break;
                default:
                    level = "warn";
            }
            //document.getElementById('noVNC_status_bar').setAttribute("class", "noVNC_status_" + level);
            document.getElementById('noVNC_status').innerHTML = text;
        }
        function updateState(rfb, state, oldstate) {
            var cad = document.getElementById('sendCtrlAltDelButton');
            switch (state) {
                case 'connecting':
                    status(Util.Localisation.get("Connecting"), "normal");
                    break;
                case 'connected':
                    if (rfb && rfb.get_encrypt()) {
                        status(Util.Localisation.
                                   get("Connected (encrypted) to ") +
                               desktopName, "normal");
                    } else {
                        status(Util.Localisation.
                                   get("Connected (unencrypted) to ") +
                               desktopName, "normal");
                    }
                    break;
                case 'disconnecting':
                    status(Util.Localisation.get("Disconnecting"), "normal");
                    break;
                case 'disconnected':
                    status(Util.Localisation.get("Disconnected"), "normal");
                    break;
                default:
                    status(state, "warn");
                    break;
            }

            if (state === 'connected') {
                cad.disabled = false;
            } else {
                cad.disabled = true;
                xvpInit(0);
            }

        }
        function disconnected(rfb, reason) {
            if (typeof(reason) !== 'undefined') {
                status(reason, "error");
            }
        }
        function notification(rfb, msg, level, options) {
            status(msg, level);
        }

        window.onresize = function () {
            // When the window has been resized, wait until the size remains
            // the same for 0.5 seconds before sending the request for changing
            // the resolution of the session
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function(){
                UIresize();
            }, 500);
        };

        function xvpInit(ver) {
            var xvpbuttons;
            xvpbuttons = document.getElementById('noVNC_xvp_buttons');
            if (ver >= 1) {
                xvpbuttons.style.display = 'inline';
            } else {
                xvpbuttons.style.display = 'none';
            }
        }

        window.onscriptsload = function () {
            var host, port, password, path, token;

            document.getElementById('sendCtrlAltDelButton').style.display = "inline";
            document.getElementById('noVNC_fullscreen_button').onclick = toggleFullscreen;
            document.getElementById('sendCtrlAltDelButton').onclick = sendCtrlAltDel;
            document.getElementById('xvpShutdownButton').onclick = xvpShutdown;
            document.getElementById('xvpRebootButton').onclick = xvpReboot;
            document.getElementById('xvpResetButton').onclick = xvpReset;

            WebUtil.init_logging(WebUtil.getConfigVar('logging', 'warn'));
            //document.title = unescape(WebUtil.getConfigVar('title', 'noVNC'));
            // By default, use the host and port of server that served this file
            host = WebUtil.getConfigVar('host', window.location.hostname);
            port = WebUtil.getConfigVar('port', window.location.port);

            // if port == 80 (or 443) then it won't be present and should be
            // set manually
            if (!port) {
                if (window.location.protocol.substring(0,5) == 'https') {
                    port = 443;
                }
                else if (window.location.protocol.substring(0,4) == 'http') {
                    port = 80;
                }
            }

            password = WebUtil.getConfigVar('password', '');
            path = WebUtil.getConfigVar('path', 'websockify');

            // If a token variable is passed in, set the parameter in a cookie.
            // This is used by nova-novncproxy.
            token = WebUtil.getConfigVar('token', null);
            if (token) {

                // if token is already present in the path we should use it
                path = WebUtil.injectParamIfMissing(path, "token", token);

                WebUtil.createCookie('token', token, 1)
            }

            if ((!host) || (!port)) {
                status('Must specify host and port in URL', 'error');
                return;
            }

            try {
                rfb = new RFB({'target':       document.getElementById('noVNC_canvas'),
                               'encrypt':      WebUtil.getConfigVar('encrypt',
                                        (window.location.protocol === "https:")),
                               'repeaterID':   WebUtil.getConfigVar('repeaterID', ''),
                               'true_color':   WebUtil.getConfigVar('true_color', true),
                               'local_cursor': WebUtil.getConfigVar('cursor', true),
                               'shared':       WebUtil.getConfigVar('shared', true),
                               'view_only':    WebUtil.getConfigVar('view_only', false),
                               'onNotification':  notification,
                               'onUpdateState':  updateState,
                               'onDisconnected': disconnected,
                               'onXvpInit':    xvpInit,
                               'onPasswordRequired':  passwordRequired,
                               'onFBUComplete': FBUComplete,
                               'onDesktopName': updateDesktopName});
            } catch (exc) {
                status('Unable to create RFB client -- ' + exc, 'error');
                return; // don't continue trying to connect
            }

            //rfb.connect(host, port, password, path);
            rfb.connect("<%= serverip %>", "<%= port %>", password, path);
            rfb.get_keyboard().set_focused(false);
        };
        function reconnect() {
            var host, port, password, path, token;          

            WebUtil.init_logging(WebUtil.getConfigVar('logging', 'warn'));
            //document.title = unescape(WebUtil.getConfigVar('title', 'noVNC'));
            // By default, use the host and port of server that served this file
            host = WebUtil.getConfigVar('host', window.location.hostname);
            port = WebUtil.getConfigVar('port', window.location.port);

            // if port == 80 (or 443) then it won't be present and should be
            // set manually
            if (!port) {
                if (window.location.protocol.substring(0,5) == 'https') {
                    port = 443;
                }
                else if (window.location.protocol.substring(0,4) == 'http') {
                    port = 80;
                }
            }

            password = WebUtil.getConfigVar('password', '');
            path = WebUtil.getConfigVar('path', 'websockify');

            // If a token variable is passed in, set the parameter in a cookie.
            // This is used by nova-novncproxy.
            token = WebUtil.getConfigVar('token', null);
            if (token) {

                // if token is already present in the path we should use it
                path = WebUtil.injectParamIfMissing(path, "token", token);

                WebUtil.createCookie('token', token, 1)
            }

            if ((!host) || (!port)) {
                status('Must specify host and port in URL', 'error');
                return;
            }

            try {
                rfb = new RFB({'target':       document.getElementById('noVNC_canvas'),
                               'encrypt':      WebUtil.getConfigVar('encrypt',
                                        (window.location.protocol === "https:")),
                               'repeaterID':   WebUtil.getConfigVar('repeaterID', ''),
                               'true_color':   WebUtil.getConfigVar('true_color', true),
                               'local_cursor': WebUtil.getConfigVar('cursor', true),
                               'shared':       WebUtil.getConfigVar('shared', true),
                               'view_only':    WebUtil.getConfigVar('view_only', false),
                               'onNotification':  notification,
                               'onUpdateState':  updateState,
                               'onDisconnected': disconnected,
                               'onXvpInit':    xvpInit,
                               'onPasswordRequired':  passwordRequired,
                               'onFBUComplete': FBUComplete,
                               'onDesktopName': updateDesktopName});
            } catch (exc) {
                status('Unable to create RFB client -- ' + exc, 'error');
                return; // don't continue trying to connect
            }

            //rfb.connect(host, port, password, path);
            rfb.connect("<%= serverip %>", "<%= port %>", password, path);
        };
	$(document).ready(function(){
          $(".broadcast").click(function(){
             var eid = $(this).val();
	     $.ajax({
	       url  : '/broadcast_change',
	       type : 'POST',
	       data : {eid : eid, port : <%= port %> },
	       success:function (){ 
	         reconnect(); 
	         closeNav();
	       }
	     });
	  });
          $('html').click(function() {
   	    rfb.get_keyboard().set_focused(false);
          });

          $('#noVNC_canvas').click(function(event){
            event.stopPropagation();
            rfb.get_keyboard().set_focused(true);
          });
        });
        </script>

<!--聊天室-->
<script src='/socket.io/socket.io.js' type='text/javascript'></script>
<script src='/javascripts/hichat.js' type='text/javascript'></script>
<script type="text/javascript">
<!--
    var dragapproved = false;  
    var dragObj;  
    var zIndex = 3;  
    var offX,offY;  
    document.onmousedown = beginDrag;  
    document.onmouseup = function() {dragapproved = false};  
    document.onmousemove = dragDrop;  
    function dragDrop(evt) {  
        if (dragapproved) {  
            var e = evt || window.event;  
            dragObj.style.left = e.clientX - offX + document.documentElement.scrollLeft + 'px';
            dragObj.style.top = e.clientY - offY + document.documentElement.scrollTop + 'px';
        }  
    }  
    function beginDrag(evt) {  
        dragObj = window.event ? event.srcElement : evt.target;  
        if (dragapproved == false && dragObj.className.indexOf("wrapper") >= 0) {  
            dragObj.style.zIndex = zIndex++;  
            offX = window.event ? event.offsetX : evt.layerX;  
            offY = window.event ? event.offsetY : evt.layerY;  
            dragapproved = true;  
        }  
    }
//-->
</script>
		
<% include footer.ejs %>
